hardcode the word

flow---

get word
check 
display result

------------------------
what are the data that is imported from me

1. guessedHistory
2. chancesLeft
3. result



class Player {
  constructor() {
    this.#wordleGuessedHistory = [];
    this.hasWon = false;  
  }
  
  get status() {
    const hasWon
  }
}


class Game {
  contructor(player, word, totalChance) {
    this.player = player;
    this.correctWord = word;
    this.totalChance = totalChance;
    this.chanceLeft = totalChance;

    this.hasGuessed = false;
  }

  updateGame(guessedWord) {
    this.#wordle.registerGuess(guessedWord);
    this.hasWon = this.isCorrectGuess(guessedWord);
    this.chanceLeft = this.chanceLeft - 1;
  }

  isGameOver() {
    this.chanceLeft === 0 || this.hasGuessed ? true: false;
  }
}

class Controller {
  constructor(game, renderer) {
    this.game = game;
    this.renderer = renderer;
  }

  takeGuess(guessedWord){
    if(this.game.isGameOver()){
      return;
    };

    this.game.updategame(guessedWord);
    this.renderer.render();
  }

  start() {
    will do some initialising and 
    this.renderer.render()
  }
}

class Renderer {
  constructor(guessElement, 
  guessButton, 
  guessHistory, 
  resultElement, 
  chancesLeft) {
    this.guessElement = guessElement;
    this.guessButton = guessButton;
    this.resultElement = resultElement;
    this.chancesLeft = chancesLeft;
    this.guessHistory = guessHistory;
  }

  render() {
    #renderResult();
    #renderGuessChanceLeft();
    #renderGuessMade();
  }
}

--------------
Requirement 3

to render new template needed expectation is 

 <section class="flex-row">               // a container with class flex-row
   <p>hello</p>                               //guessedWord
   <p>Correct Letters: <span>3</span> </p>    //a subcontainer with correct letters with child count
 </section>

----------------



summary = [{b: {isPresent: true, isCorrectPosition: true}}]

const word = 'brown';

const guessedWord = 'brown';
const summary = {};

[...guessedWord].forEach ((letter, index) => {
  let isPresent = false;
  let isCorrectPosition = false;

  if(word.includes(letter)) {
    isPresent = true;
    if(index === word.indexOf(letter)) {
      isCorrectPosition = true;
    }
  }
  summary[letter] = {isPresent, isCorrectPosition};
  
  })


----------
Bugs

[ ] letter case issue
[ ] length is not fixed
[ ] other than letter is allowed
